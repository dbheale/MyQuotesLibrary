<div class="relative">

    <input @bind-Value="SearchText"
           @bind-Value:event="oninput"
           class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
           placeholder="Search categories..." />

    <ul class="absolute z-10 bg-white border border-gray-300 rounded w-full mt-1 max-h-40 overflow-y-auto"
        style="display: @(FilteredCategorys.Any() ? "block" : "none")">
        @foreach (var category in FilteredCategorys)
        {
            <li class="px-4 py-2 hover:bg-gray-200 cursor-pointer" @onclick="() => SelectCategoryAsync(category)">
                @category
            </li>
        }
    </ul>

    @if (!FilteredCategorys.Any() && !string.IsNullOrWhiteSpace(SearchText))
    {
        <div class="absolute z-10 bg-white border border-gray-300 rounded w-full mt-1 p-2">
            <span class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded focus:outline-none focus:shadow-outline"
                  @onclick="AddCategory">
                Add "@SearchText"
            </span>
        </div>
    }
</div>

@code {
    [Parameter]
    public EventCallback<Category> OnCategorySelected { get; set; }

    private string _searchText = string.Empty;
    private string SearchText
    {
        get => _searchText; set
        {
            _searchText = value;
            OnInputChanged();
        }
    }

    private List<string> FilteredCategorys { get; set; } = [];
    private IEnumerable<Category> Categorys { get; set; } = [];

    [Inject]
    private CategoryService CategoryService { get; set; } = default!;

    private async Task ReloadCategorysAsync()
    {
        Categorys = await CategoryService.GetAllAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await ReloadCategorysAsync();
    }

    private Task SelectCategoryAsync(string category)
    {
        SearchText = string.Empty;
        FilteredCategorys.Clear();
        StateHasChanged();
        return OnCategorySelected.InvokeAsync(Categorys.First(f => f.Name == category));
    }

    private void OnInputChanged()
    {
        FilteredCategorys = Categorys
            .Where(t => SearchText != string.Empty && t.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase))
            .Select(s => s.Name)
            .ToList();

        StateHasChanged();
    }

    private async Task AddCategory()
    {
        await CategoryService.AddAsync(SearchText);
        await SelectCategoryAsync(SearchText);
        await ReloadCategorysAsync();
    }
}